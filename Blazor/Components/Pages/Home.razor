@page "/"
@using ARClassLibrary;
@using Blazor.Models;
@inject ISqlDataAccess sql
@inject IConfiguration config
@inject IJSRuntime JSRuntime


<PageTitle>Upload Test</PageTitle>

<h1>Upload Test</h1>

<EditForm Model="newUser" OnValidSubmit="SubmitForm">
    <div>
        <label for="userName"> BrugerNavn: </label>
        <InputText id="username" class="form-control" @bind-Value="newUser.UserName" />

    </div>
    <div>
        <label for="firstName"> Fornavn: </label>
        <InputText id="firstName" class ="form-control" @bind-Value="newUser.FirstName" />
        
    </div>
    <div>
        <label for="lastName"> Efternavn: </label>
        <InputText id="lastName" class="form-control" @bind-Value="newUser.LastName" />

    </div>
    <div>
        <label for="profilePicture"> Profil Billede: </label>
        <InputFile OnChange="@LoadFiles" class="form-control" accept=".png,.jpg,.jpeg,.glb" />
    </div>
    <button class="btn btn-primary mt-3" type="submit"> Opret Profil </button>
</EditForm>


@if (errors.Count > 0)
{
    <h2>Errors</h2>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}

@if (users is not null)
{
    <h2>Eksisterende Brugere</h2>
    <table class="table width: 100%; table-layout: auto; ">
        <thead>
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Password</th>
                <th>Role</th>
                <th>Picture</th>
                <th>FileName</th>
                <th>UserName</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var c in users)
            {
                <tr>
                    <td>@c.Id</td>
                    <td>@c.FirstName</td>
                    <td>@c.LastName</td>
                    <td>@c.Email</td>
                    <td>@c.Password</td>
                    <td>@c.Role</td>
                    <td>
                        @if (string.IsNullOrWhiteSpace(c.FileName) == false)
                        {
                            var extension = Path.GetExtension(c.FileName);
                            if (extension == ".png" || extension == ".jpg" || extension == ".jpeg")
                            {
                                <img src="@CreateWebPath(c.FileName)"/>
                            }
                            else if (extension == ".glb")
                            {
                                var webPath = CreateWebPath(c.FileName);
                                <p>GLB Path: @webPath</p> <!-- Debug output -->
                                <model-viewer src="@webPath" camera-controls style="width: 100%; height: 100%;"></model-viewer>
                            }
                        }
                    </td>
                    <td>@c.FileName</td>
                    <td>@c.UserName</td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    private long maxFileSize = 1024 * 1024 * 50; // 50 MB max fil størrelse, det sidste nummer er til at ændre MB
    private List<string> errors = new();
    private Users newUser = new ();
    private IBrowserFile? file;
    private List<Users>? users;


    private async Task LoadUsers()
    {
        users = await sql.LoadData<Users>(
            "dbo.spUsers_GetAll",
            "DbConnection",
            null);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("import", "https://ajax.googleapis.com/ajax/libs/model-viewer/3.5.0/model-viewer.min.js");
    }
    }
    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task SubmitForm()
    {
        errors.Clear();

        try
        {
            string relativePath = await CaptureFile();
            newUser.FileName = relativePath;

            await sql.SaveData("dbo.spUsers_Insert", "DbConnection", newUser);

            newUser = new();
            file = null;
            errors.Clear();

            await LoadUsers();
        }
        catch (Exception ex)
        {
            errors.Add($"Error: { ex.Message}");
        }
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task<string> CaptureFile()
    {
        if (file is null)
        {
            return "";
        }

        try
        {
            string newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name));

            string path = Path.Combine(config.GetValue<string>("FileStorage")!, "Test", newFileName);

            string relativePath = Path.Combine("Test", newFileName);

            Directory.CreateDirectory(Path.Combine(config.GetValue<string>("FileStorage")!, "Test"));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            errors.Add($"Error with file {file.Name} Error: {ex.Message}");
            throw;
        }

    }

}


